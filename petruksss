#include <iostream>
#include <vector>
#include <cstring>

using namespace std;

bool opera(char o) {
    return (o == '*' || o == '/' || o == '+' || o == '-' || o == '%');
}
vector<string> strToInfix(string inputStr) {
    vector<string> infix;
    string angka;

    for (size_t i = 0; i < inputStr.size(); i++) {
        char op = inputStr[i];

        if (isspace(op)) {
            continue;
        }
        else if (isdigit(op)) {
            angka += op;
        } 
        else if (op == '-' && (i == 0 || opera(inputStr[i - 1]))) {
            if(opera(inputStr[i-1]) || inputStr[i+1] == '('){
                infix.push_back("-1");
                infix.push_back("*");
            }
            else{
                angka += op;
            }
        } 
        else {
            if (!angka.empty()) {
                infix.push_back(angka);
                angka.clear();
            }
            infix.push_back(string(1, op));
        }
    }

    if (!angka.empty()) {
        infix.push_back(angka);
    }
    return infix;
}

vector<string> infixToPostfix(vector<string>& infixArr) {
    vector<string> postfix;
    stack<string> opStack;

    for (const string& arr : infixArr) {
        if (isdigit(arr[0]) || (arr.length() > 1 && isdigit(arr[1]))) {
            postfix.push_back(arr);
        } else if (arr == "(") {
            opStack.push(arr);
        } else if (arr == ")") {
            while (!opStack.empty() && opStack.top() != "(") {
                postfix.push_back(opStack.top());
                opStack.pop();
            }
            opStack.pop();
        } else {
            while (!opStack.empty() && precedence(opStack.top()[0]) >= precedence(arr[0])) {
                postfix.push_back(opStack.top());
                opStack.pop();
            }
            opStack.push(arr);
        }
    }

    while (!opStack.empty()) {
        postfix.push_back(opStack.top());
        opStack.pop();
    }
    return postfix;
}
        

int main(){
    string input;
    getline(cin, input);
    vector<string> infix = strToInfix(input);
    for (const string& hasil : infix) {
        cout << hasil << " ";
    }
    cout << endl;
    return 0;
}
